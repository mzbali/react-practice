{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","sendRequest","useHttp","addComment","commentTextRef","useRef","submitFormHandler","event","a","preventDefault","commentText","current","value","quoteId","id","onAddComment","className","classes","form","onSubmit","control","htmlFor","rows","ref","actions","CommentItem","item","text","CommentsList","comments","map","comment","Comments","getAllComments","status","allComments","data","error","useState","isAddingComment","setIsAddingComment","useEffect","addCommentHandler","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","params","useParams","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/4.7b5a133f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef } from 'react';\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\n\nconst NewCommentForm = (props) => {\n  const { sendRequest } = useHttp(addComment);\n  const commentTextRef = useRef();\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n    const commentText = commentTextRef.current.value;\n    // send comment to server\n    await sendRequest({ quoteId: props.id, commentText });\n    props.onAddComment();\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useState } from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = (props) => {\n  const {\n    sendRequest,\n    status,\n    data: allComments,\n    error,\n  } = useHttp(getAllComments, true);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  useEffect(() => {\n    sendRequest(props.quoteId);\n  }, [sendRequest, props.quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = async () => {\n    await sendRequest(props.quoteId);\n    setIsAddingComment(false);\n  };\n  let comments = <p>Comments...</p>;\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  } else if (error) {\n    comments = <p className=\"centered\">{error}</p>;\n  } else if (allComments.length === 0) {\n    comments = <p className=\"centered\">No comments for this quotes.</p>;\n  } else {\n    comments = <CommentsList comments={allComments} />;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm onAddComment={addCommentHandler} id={props.quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\nimport { Fragment } from 'react';\nimport { Route, Link, useRouteMatch, useParams } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\nconst QuoteDetail = () => {\n  const {\n    sendRequest,\n    status,\n    data: quote,\n    error,\n  } = useHttp(getSingleQuote, true);\n  const params = useParams();\n  const match = useRouteMatch();\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n  if (!quote.text) {\n    return <p>No quotes found</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={quote.text} author={quote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`} exact>\n        <Comments quoteId={quoteId} />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}